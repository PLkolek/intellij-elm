/* The following code was generated by JFlex 1.4.3 on 07.02.16 18:05 */

package mkolaczek.elm;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static mkolaczek.elm.psi.ElmTypes.*;
import com.intellij.psi.TokenType;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07.02.16 18:05 from the specification file
 * <tt>/home/kolzi/Programowanie/ElmIntellij/src/mkolaczek/elm/Elm.flex</tt>
 */
public class ElmLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INCOMMENT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\0\1\2\1\1\22\0\1\2\1\6\1\0\1\6"+
    "\1\6\2\6\1\0\1\31\1\32\1\6\1\6\1\33\1\36\1\34"+
    "\1\6\12\4\1\41\1\0\1\6\1\35\1\37\2\6\32\3\3\0"+
    "\1\6\1\0\1\0\1\23\2\5\1\11\1\14\1\5\1\27\1\16"+
    "\1\20\2\5\1\13\1\7\1\26\1\10\1\21\1\5\1\17\1\24"+
    "\1\22\1\12\1\5\1\15\1\25\1\30\1\5\1\42\1\40\1\43"+
    "\1\6\43\0\4\6\1\6\1\0\1\6\1\6\2\0\1\6\1\0"+
    "\1\6\1\6\1\6\1\6\2\0\1\6\3\0\1\6\36\0\1\6"+
    "\37\0\1\6\u01ca\0\4\6\14\0\16\6\5\0\7\6\1\0\1\6"+
    "\1\0\21\6\165\0\1\6\16\0\2\6\160\0\1\6\213\0\1\6"+
    "\u010c\0\1\6\166\0\3\6\2\0\1\6\2\0\2\6\316\0\1\6"+
    "\12\0\1\6\23\0\2\6\367\0\1\6\u01fb\0\2\6\6\0\1\6"+
    "\1\6\365\0\1\6\176\0\1\6\202\0\6\6\1\6\1\6\204\0"+
    "\1\6\371\0\1\6\305\0\1\6\301\0\3\6\17\0\1\6\1\0"+
    "\3\6\2\0\6\6\24\0\1\6\1\0\1\6\1\0\1\6\205\0"+
    "\10\6\1\0\6\6\1\0\2\6\5\0\4\6\305\0\2\6\u02f0\0"+
    "\12\6\u0441\0\1\6\u0164\0\1\6\235\0\42\6\u0161\0\12\6\11\0"+
    "\11\6\u0440\0\1\6\1\0\3\6\13\0\3\6\15\0\3\6\15\0"+
    "\3\6\15\0\2\6\105\0\1\6\15\0\1\6\47\0\3\6\15\0"+
    "\3\6\23\0\33\6\105\0\2\6\1\0\4\6\1\0\2\6\12\0"+
    "\1\6\1\0\2\6\1\6\5\0\6\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\6\13\0\2\6\4\0\5\6\5\0\1\6"+
    "\1\6\2\6\1\0\1\6\100\0\5\6\5\6\2\6\4\6\1\6"+
    "\2\6\1\6\2\6\1\6\7\6\1\6\37\6\2\6\2\6\1\6"+
    "\1\6\1\6\37\6\u010c\6\10\6\4\6\24\6\2\6\7\6\2\0"+
    "\121\6\1\6\36\6\31\6\50\6\6\6\22\6\14\0\47\6\31\0"+
    "\13\6\121\0\116\6\26\0\267\6\1\6\11\6\1\6\66\6\10\6"+
    "\157\6\1\6\220\6\1\0\147\6\54\0\54\6\5\6\2\0\37\6"+
    "\12\0\20\6\u0100\6\203\6\26\0\77\6\4\0\40\6\2\0\u0102\6"+
    "\60\6\25\6\2\6\6\6\3\0\12\6\u018b\0\6\6\u0195\0\32\6"+
    "\1\0\131\6\14\0\326\6\32\0\14\6\10\0\1\6\15\0\2\6"+
    "\14\0\1\6\25\0\2\6\6\0\2\6\133\0\2\6\363\0\2\6"+
    "\4\0\12\6\40\0\44\6\34\0\37\6\13\0\36\6\10\0\1\6"+
    "\17\0\40\6\12\0\47\6\17\0\77\6\1\0\u0100\6\u19c0\0\100\6"+
    "\u5690\0\67\6\u0239\0\27\6\11\0\2\6\147\0\2\6\235\0\4\6"+
    "\12\0\2\6\1\6\1\6\u023d\0\3\6\u50af\0\1\6\210\0\20\6"+
    "\u023a\0\1\6\1\6\144\0\1\6\1\0\3\6\2\0\1\6\232\0"+
    "\1\6\6\0\1\6\20\0\3\6\37\0\1\6\1\0\1\6\33\0"+
    "\1\6\1\0\1\6\201\0\2\6\1\6\1\6\1\6\2\6\1\0"+
    "\1\6\4\6\2\6\15\0\2\6\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\6\6\1\10\1\11\1\12\1\13\1\14\1\7\1\15"+
    "\1\16\1\2\4\1\6\6\1\17\1\20\1\21\1\22"+
    "\1\0\1\23\1\24\6\6\1\25\4\6\1\26\3\6"+
    "\1\27\1\6\1\30\1\31\1\6\1\32\1\6\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\154\0\220\0\264\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\110\0\110"+
    "\0\330\0\u01d4\0\330\0\u01f8\0\330\0\330\0\u021c\0\u0240"+
    "\0\u0264\0\u0288\0\110\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c"+
    "\0\u0360\0\264\0\330\0\330\0\330\0\u0384\0\110\0\110"+
    "\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\110\0\u0480"+
    "\0\u04a4\0\u04c8\0\u04ec\0\264\0\u0510\0\u0534\0\u0558\0\264"+
    "\0\u057c\0\264\0\264\0\u05a0\0\264\0\u05c4\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\11"+
    "\4\7\1\12\1\13\2\7\1\14\1\7\1\15\1\16"+
    "\5\7\1\17\1\20\1\21\1\22\1\23\1\24\1\10"+
    "\1\25\1\26\1\27\1\3\36\30\1\31\3\30\1\32"+
    "\1\33\45\0\1\4\1\5\44\0\3\6\1\0\22\6"+
    "\16\0\3\7\1\0\22\7\21\0\1\10\24\0\7\10"+
    "\5\0\3\7\1\0\1\7\1\34\20\7\16\0\3\7"+
    "\1\0\16\7\1\35\3\7\16\0\3\7\1\0\7\7"+
    "\1\36\12\7\16\0\3\7\1\0\1\37\21\7\16\0"+
    "\3\7\1\0\21\7\1\40\16\0\3\7\1\0\4\7"+
    "\1\41\10\7\1\42\4\7\21\0\1\10\24\0\1\10"+
    "\1\43\5\10\10\0\1\10\24\0\3\10\1\44\1\45"+
    "\2\10\40\0\1\46\5\0\36\30\1\0\3\30\45\0"+
    "\1\47\36\0\1\50\10\0\3\7\1\0\2\7\1\51"+
    "\17\7\16\0\3\7\1\0\12\7\1\52\7\7\16\0"+
    "\3\7\1\0\5\7\1\53\14\7\16\0\3\7\1\0"+
    "\12\7\1\54\7\7\16\0\3\7\1\0\12\7\1\55"+
    "\7\7\16\0\3\7\1\0\11\7\1\56\10\7\53\0"+
    "\1\57\6\0\3\7\1\0\3\7\1\60\16\7\16\0"+
    "\3\7\1\0\1\7\1\61\20\7\16\0\3\7\1\0"+
    "\10\7\1\62\11\7\16\0\3\7\1\0\1\7\1\63"+
    "\20\7\16\0\3\7\1\0\5\7\1\64\14\7\16\0"+
    "\3\7\1\0\14\7\1\65\5\7\16\0\3\7\1\0"+
    "\4\7\1\66\15\7\16\0\3\7\1\0\15\7\1\67"+
    "\4\7\16\0\3\7\1\0\5\7\1\70\14\7\16\0"+
    "\3\7\1\0\10\7\1\71\11\7\16\0\3\7\1\0"+
    "\15\7\1\72\4\7\16\0\3\7\1\0\5\7\1\73"+
    "\14\7\16\0\3\7\1\0\11\7\1\74\10\7\16\0"+
    "\3\7\1\0\13\7\1\75\6\7\16\0\3\7\1\0"+
    "\17\7\1\76\2\7\16\0\3\7\1\0\20\7\1\77"+
    "\1\7\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\13\1\2\11\12\1\1\11\12\1"+
    "\1\0\2\11\6\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   private final LinkedList<Integer> states = new LinkedList();

   private void yypushstate(int state) {
       states.addFirst(yystate());
       yybegin(state);
   }
   private void yypopstate() {
       final int state = states.removeFirst();
       yybegin(state);
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ElmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return COMMA;
          }
        case 28: break;
        case 17: 
          { return COMMENT;
          }
        case 29: break;
        case 15: 
          { return AS;
          }
        case 30: break;
        case 5: 
          { return CAP_VAR;
          }
        case 31: break;
        case 27: 
          { return EXPOSING;
          }
        case 32: break;
        case 3: 
          { return FRESH_LINE;
          }
        case 33: break;
        case 23: 
          { return WHERE;
          }
        case 34: break;
        case 22: 
          { return TYPE;
          }
        case 35: break;
        case 7: 
          { return SYM_OP;
          }
        case 36: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 37: break;
        case 12: 
          { return EQUALS;
          }
        case 38: break;
        case 1: 
          { return COMMENT_CONTENT;
          }
        case 39: break;
        case 21: 
          { yypushstate(INCOMMENT); return BEGIN_DOC_COMMENT;
          }
        case 40: break;
        case 14: 
          { return COLON;
          }
        case 41: break;
        case 4: 
          { return FORCED_WS;
          }
        case 42: break;
        case 8: 
          { return LPAREN;
          }
        case 43: break;
        case 9: 
          { return RPAREN;
          }
        case 44: break;
        case 13: 
          { return OR;
          }
        case 45: break;
        case 6: 
          { return LOW_VAR;
          }
        case 46: break;
        case 19: 
          { yypopstate(); return END_COMMENT;
          }
        case 47: break;
        case 26: 
          { return IMPORT;
          }
        case 48: break;
        case 24: 
          { return ALIAS;
          }
        case 49: break;
        case 25: 
          { return MODULE;
          }
        case 50: break;
        case 20: 
          { yypushstate(INCOMMENT); return BEGIN_COMMENT;
          }
        case 51: break;
        case 11: 
          { return DOT;
          }
        case 52: break;
        case 16: 
          { return OPEN_LISTING;
          }
        case 53: break;
        case 18: 
          { return ARROW;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
